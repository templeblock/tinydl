//
//  main.cpp for two spirals problem
//
//  simple demo solving the two spirals problem using tinydl
//  a very small neural network simulator for experiments
//
//  Created by Matt Oberdorfer.
//  Copyright (c) 2016 Matt Oberdorfer. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//  build instructions: g++ main.cpp -o twospirals
//  run: ./twospirals
//
//  expected output:

/*********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
********************************************************++::::          ::::++++**************************************************
****************************************************++                          ::++**********************************************
************************************************++                ::::              ::++******************************************
**********************************************::        ::********************          ++****************************************
********************************************::      ::****************************        ++**************************************
******************************************::      ********++::::        ::++********++      ++************************************
****************************************::      ******++::                    ::********      ++**********************************
**************************************++      ******::                            ++******      ++********************************
**************************************      ******::        ++**********++::        ++******    ::********************************
************************************++      ****::      ::********************        ++****      ++******************************
************************************      ****++      ++****++          ::******        ******    ::******************************
**********************************++      ****::    ++****::                ++****      ::****::    ++****************************
**********************************::    ++**++      ****::                    ++****      ******    ++****************************
**********************************::    ****::    ++**++      ::++++++::::      ****::    ++****    ::****************************
**********************************      ****::    ****      ::**********++      ::**++    ::****::    ****************************
**********************************      ****      ****      ++****++******::      ****      ******    ****************************
**********************************      ****      ****      ++**++    ****++      ****      ******    ++**************************
************************++  ::****++    ::****    ::****    ::++**::  ::****::    ****      ******    ++**************************
************************++    ******      ****      ++**++    ::::    ++**++      ****      ******    ++**************************
**************************    ******      ****      ::****::          ****++      ****      ******    ****************************
**************************    ******::    ++**++      ++****++    ::******::    ::****    ::****++    ****************************
**************************::  ******++      ****      ::++**************::      ++**::    ::****    ::****************************
**************************++    ******      ++****        ::++****++++::      ::****      ++****    ::****************************
****************************    ******::      ****++          ::::::          ****::    ::******    ++****************************
****************************::  ::******::      ******                    ::****++      ++****    ::******************************
****************************++    ******++        ******++            ::******++      ::******    ++******************************
******************************::    ******++        ++**********************::      ::******    ::********************************
********************************::  ++******++          ++**************::        ::******++    ++********************************
********************************++    ********++::                              ::********    ::**********************************
**********************************++    **********::                        ::++********    ::************************************
************************************++    ::**********++::            ::::++********++    ::++************************************
**************************************++      ****************++++++**************      ::++**************************************
****************************************++        ****************************::      ::******************************************
********************************************::        ::****************++        ::++********************************************
**********************************************++::                            ::++************************************************
****************************************************++::::              ::::++****************************************************
************************************************************++++++++++************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************/

#include "twospirals.h"
#include "tinydl.cpp"

#define PI  3.14159265359

// displaySpirals - viusalizing the 2d graph/matrix
// for the two spirals using ascii character output

void displaySpirals(net *n) {
    double inputs[2], out_results[1];
    int k_size = 65, l_size = 65;
    double x, y;
    
    // print a 65 by 65 matrix
    for(float k = 0; k < k_size; k++) {
        for(float l = 0; l< l_size; l++) {
            
            // create x and y inputs
            y = -(k - k_size/2.0)/(k_size/2.0);
            x = (l - l_size/2.0)/(l_size/2.0);
            
            // transform input
            inputs[0] = sqrt(x*x + y*y)/0.5;
            inputs[1] = atan2(y, x)/PI/1.2;
            
            // feedforward input through net
            n->setInputLayer(0, &inputs[0]);
            n->feedForward(&out_results[0]);
            
            // print "pixel" from output
            if( out_results[0] > 0.9 )
                printf("  ");
            else
            if( out_results[0] > 0.5 )
                printf("::");
            else
            if( out_results[0] > 0.1 )
                    printf("++");
            else
                printf("**");
            
        }
        printf("\n");
        
    }
}

// create network and learn two spirals problem in online training

int main(int argc, const char * argv[]) {

    int output_layer_no = 2;
    // array with number of neurons for each layers
    ulong     layer_neuron_num[] = {2,7,1};
    // array with activation functions and their derivatives used for each layer
    func_ptr  layer_func_type[]  = {Identity, IdentityDer, Sig, SigDer, Sig, SigDer,Sig, SigDer};
    // array of learning rates for each layer
    double    layer_eta[]        = {0.4,0.4,0.4};
    // array of momentum values for each layer
    double    layer_alpha[]      = {0.4,0.4,0.4};
    
    // create neural net, connect layers and initialize weights
    net *mynet = new net(output_layer_no+1, layer_neuron_num, layer_func_type, layer_eta, layer_alpha);
    mynet->connectInputLayer(0, NULL);
    mynet->connectLayers(0, 1, NULL, RANDOM);
    mynet->connectLayers(1, output_layer_no, NULL, RANDOM);
    mynet->connectOutputLayer(output_layer_no);
    
    // display values of neurons and weights
    mynet->displayValues();
    
    double out_results[2], inputs[4], target;
    double error_per_sample = 0;
    ulong  sample_size = 194, epocs = 30001;
    
    for(long i=0; i<epocs; i++) {
        
        error_per_sample = 0;
        
        for(int j = 0; j<sample_size; j++) {
            
            // transform the input data
            inputs[0] = sqrt(spirals[j*3] * spirals[j*3]/42.25 + spirals[j*3+1]*spirals[j*3+1]/36);
            inputs[1] = atan2(spirals[j*3+1]/6, spirals[j*3]/6.5)/PI;
            target    = spirals[j*3+2] == 1? 1:0;
            
            // feed input forward through net
            mynet->setInputLayer(0, &inputs[0]);
            mynet->feedForward(&out_results[0]);
            
            // backpropagate error and adjust weights
            mynet->setTargetOutputLayer(output_layer_no, &target);
            mynet->backpropagateError();
            mynet->updateWeights();
        }
       
        // display error and learning progress every 1000 iteration
        if((i % 1000) == 0) {
            displaySpirals(mynet);
        }
    }
    printf("DONE\n");
}

